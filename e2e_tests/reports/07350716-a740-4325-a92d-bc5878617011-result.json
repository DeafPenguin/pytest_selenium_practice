{"name": "test_interactWithPage", "status": "failed", "statusDetails": {"message": "AssertionError: Expected text to be 'Amod' but got 'Mukesh'", "trace": "browserChrome = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7c6ba29fa22e91b197d6c9da5827ef8b\")>\n\n    def test_interactWithPage(browserChrome):\n        # Variables for the test\n        headerText = \"Automation Testing Practice\"\n        userName = \"Victor Machado\"\n        userEmail = \"victormurilo@gmail.com\"\n        userPhone = \"(62)99999-9999\"\n        userAddress = \"Goiania - GO\"\n        userCountry = \"Brazil\"\n        userAmit = \"Amit\"\n        color = \"Green\"\n        pauseText = \"Press enter in terminal to finish...\"\n    \n        testAutomationPracticePage = TestAutomationPracticePage(browserChrome)\n        testAutomationPracticePage.load()\n    \n        # Validating header\n        testAutomationPracticePage.validateElementText(testAutomationPracticePage.headerInner, headerText)\n    \n        # Fill form\n        testAutomationPracticePage.type(testAutomationPracticePage.nameInput, userName)\n        testAutomationPracticePage.type(testAutomationPracticePage.emailInput, userEmail)\n        testAutomationPracticePage.type(testAutomationPracticePage.phoneInput, userPhone)\n        testAutomationPracticePage.type(testAutomationPracticePage.addressInput, userAddress)\n    \n        # Selecting gender\n        testAutomationPracticePage.clickElement(testAutomationPracticePage.maleGenderRadioButton)\n    \n        # Selecting Tuesday on list\n        testAutomationPracticePage.selectDayOfList(3)\n    \n        # Selecting country\n        testAutomationPracticePage.select(testAutomationPracticePage.countryDropdown, userCountry)\n    \n        # Selecting colors\n        testAutomationPracticePage.select(testAutomationPracticePage.colors, color)\n    \n        # Validating table content\n        testAutomationPracticePage.validateCellContentByPosition(testAutomationPracticePage.webTable, 2, 2, userAmit)\n    \n>       testAutomationPracticePage.validateCellContentByColumnName(testAutomationPracticePage.webTable, \"Author\", 5, \"Amod\")\n\ntap_full.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pageObjects.test_automation_practice_page.TestAutomationPracticePage object at 0x7de66d85fc40>, tableLocator = ('css selector', '[name=\"BookTable\"]'), columnName = 'Author', row = 5\nexpectedText = 'Amod'\n\n    def validateCellContentByColumnName(self, tableLocator: tuple, columnName, row: int, expectedText):\n        elementText = self.getCellTextByColumnName(\n            tableLocator,\n            columnName,\n            row\n        )\n>       assert elementText == expectedText, f\"Expected text to be '{expectedText}' but got '{elementText}'\"\nE       AssertionError: Expected text to be 'Amod' but got 'Mukesh'\n\n../commonElements/tables.py:86: AssertionError"}, "start": 1720116304989, "stop": 1720116309693, "uuid": "7ac30c41-af3d-40ca-949c-7143cd546cc8", "historyId": "a94fa960d03252e19068b17e2048b5db", "testCaseId": "a94fa960d03252e19068b17e2048b5db", "fullName": "e2e_tests.tap_full#test_interactWithPage", "labels": [{"name": "parentSuite", "value": "e2e_tests"}, {"name": "suite", "value": "tap_full"}, {"name": "host", "value": "ENCSABCAMLT0895"}, {"name": "thread", "value": "19946-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e_tests.tap_full"}]}