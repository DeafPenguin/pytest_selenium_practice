{"name": "test_interactWithPage", "status": "failed", "statusDetails": {"message": "AssertionError: \n  Iframe content should be The result storage capacity has been reached for this form. Your result was not created. Please contact the form owner., but instead is An error has occurred.\nassert 'An error has occurred' == 'The result s...e form owner.'\n  \n  - The result storage capacity has been reached for this form. Your result was not created. Please contact the form owner.\n  + An error has occurred", "trace": "browserChrome = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"79713e9c62e42560632fc45a8b432869\")>\n\n    def test_interactWithPage(browserChrome):\n        # Variables for the test\n        headerText = \"Automation Testing Practice\"\n        userName = \"Victor Machado\"\n        userEmail = \"victormurilo@gmail.com\"\n        userPhone = \"(62)99999-9999\"\n        userAddress = \"Goiania - GO\"\n        userCountry = \"Brazil\"\n        sundayText = \"Sunday\"\n        mondayText = \"Monday\"\n        tuesdayText = \"Tuesday\"\n        wednesdayText = \"Wednesday\"\n        thursdayText = \"Thursday\"\n        fridayText = \"Friday\"\n        saturdayext = \"Saturday\"\n        targetDate = '12/25/2022'\n        openCartLink = 'https://demo.opencart.com/'\n        orangeHRMLink = 'https://opensource-demo.orangehrmlive.com/web/index.php/auth/login'\n        userAmit = \"Amit\"\n        thirdBook = \"Learn JS\"\n        fourthBook = \"Master In Selenium\"\n        sixthBook = \"Master In JS\"\n        javascriptSubject = \"Javascript\"\n        fourthBookPrice = \"3000\"\n        color = \"Green\"\n        product4Name = \"Product 4\"\n        product4Price = \"$7.99\"\n        pauseText = \"\\n\\nPress enter in terminal to finish...\"\n    \n        testAutomationPracticePage = TestAutomationPracticePage(browserChrome)\n        testAutomationPracticePage.load()\n    \n        # Validating header\n        testAutomationPracticePage.validateElementText(testAutomationPracticePage.headerInner, headerText)\n    \n        # Fill form\n        testAutomationPracticePage.type(testAutomationPracticePage.nameInput, userName)\n        testAutomationPracticePage.type(testAutomationPracticePage.emailInput, userEmail)\n        testAutomationPracticePage.type(testAutomationPracticePage.phoneInput, userPhone)\n        testAutomationPracticePage.type(testAutomationPracticePage.addressInput, userAddress)\n    \n        # Selecting gender\n        testAutomationPracticePage.clickElement(testAutomationPracticePage.femaleGenderRadioButton)\n    \n        # Selecting Monday and Wednesday on list\n        testAutomationPracticePage.selectDayOfListByValue(mondayText)\n        testAutomationPracticePage.selectDayOfListByValue(wednesdayText)\n    \n        # Validating Days selection\n        testAutomationPracticePage.validateWeekdayIsNotChecked(sundayText)\n        testAutomationPracticePage.validateWeekdayIsChecked(mondayText)\n        testAutomationPracticePage.validateWeekdayIsNotChecked(tuesdayText)\n        testAutomationPracticePage.validateWeekdayIsChecked(wednesdayText)\n        testAutomationPracticePage.validateWeekdayIsNotChecked(thursdayText)\n        testAutomationPracticePage.validateWeekdayIsNotChecked(fridayText)\n        testAutomationPracticePage.validateWeekdayIsNotChecked(saturdayext)\n    \n        # Selecting country\n        testAutomationPracticePage.select(testAutomationPracticePage.countryDropdown, userCountry)\n    \n        # Selecting colors\n        testAutomationPracticePage.select(testAutomationPracticePage.colors, color)\n    \n        # Select an date on calendar\n        testAutomationPracticePage.selectDate(testAutomationPracticePage.calendar, targetDate)\n    \n        # Validate Links\n        testAutomationPracticePage.validateElementHref(testAutomationPracticePage.openCartLink, openCartLink)\n        testAutomationPracticePage.validateElementHref(testAutomationPracticePage.orangeHRMLink, orangeHRMLink)\n    \n        # Validate Author from given book\n        testAutomationPracticePage.validateBookAuthor(sixthBook, userAmit)\n    \n        # Validate Subject from given book\n        testAutomationPracticePage.validateBookSubject(thirdBook, javascriptSubject)\n    \n        # Validate Price from given book\n        testAutomationPracticePage.validateBookPrice(fourthBook, fourthBookPrice)\n    \n        # Click on select by given product name\n        testAutomationPracticePage.selectProductByName(product4Name)\n    \n        # Validate Price from given product\n        testAutomationPracticePage.validateProductPrice(product4Name, product4Price)\n    \n        # Submit form and validate iframe\n>       testAutomationPracticePage.submitFormAndValidate()\n\ntap_full.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pageObjects.test_automation_practice_page.TestAutomationPracticePage object at 0x72c743ac50c0>\n\n    def submitFormAndValidate(self):\n        expectedContentLabel = \"An error has occurred\"\n        expectedContentDescription = \"The result storage capacity has been reached for this form. Your result was not created. Please contact the form owner.\"\n    \n        # Switch to Iframe\n        self.switchToIframe(self.iframeTapLocator)\n    \n        # Submit form\n        self.clickElement(self.submitButton)\n    \n        # Validate error label\n        contentLabel = self.getElement(self.iframeHeaderError).text\n        assert contentLabel == expectedContentLabel, f\"\\nIframe content should be {expectedContentLabel}, but instead is {contentLabel}.\"\n        print(f\"\\nIframe content validated successfully: '{expectedContentLabel}'\")\n    \n        # Validate error description\n        contentDescription = self.getElement(self.iframeHeaderError).text\n>       assert contentDescription == expectedContentDescription, f\"\\nIframe content should be {expectedContentDescription}, but instead is {contentDescription}.\"\nE       AssertionError: \nE         Iframe content should be The result storage capacity has been reached for this form. Your result was not created. Please contact the form owner., but instead is An error has occurred.\nE       assert 'An error has occurred' == 'The result s...e form owner.'\nE         \nE         - The result storage capacity has been reached for this form. Your result was not created. Please contact the form owner.\nE         + An error has occurred\n\n../pageObjects/test_automation_practice_page.py:141: AssertionError"}, "start": 1720529834082, "stop": 1720529845857, "uuid": "4e60a684-f291-40a8-b829-5a107770ed46", "historyId": "a94fa960d03252e19068b17e2048b5db", "testCaseId": "a94fa960d03252e19068b17e2048b5db", "fullName": "e2e_tests.tap_full#test_interactWithPage", "labels": [{"name": "parentSuite", "value": "e2e_tests"}, {"name": "suite", "value": "tap_full"}, {"name": "host", "value": "ENCSABCAMLT0895"}, {"name": "thread", "value": "15573-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e_tests.tap_full"}]}